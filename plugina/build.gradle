apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.hutcwp.plugina"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    aaptOptions {
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x50'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(path: ':cow')
}

assemble.doLast {
    android.applicationVariants.all { variant ->
        println 'variant ->  ' + variant.name
        // Copy Release artifact to HostApp's assets and rename
        if (variant.name == "release") {
            variant.outputs.each { output ->
                File originFile = output.outputFile
                println originFile.absolutePath
                def pluginName = "plugin1.apk"
//                copy {
//                    println 'copy task...'
//                    from originFile
//                    into "$rootDir/app/src/main/assets"
//                    rename(originFile.name, pluginName)
//                }

                println "Deploying plugin so"
                def adb = null
                def localProperties = new File(rootDir, "local.properties")
                if (localProperties.exists()) {
                    Properties properties = new Properties()
                    localProperties.withInputStream {
                        instr -> properties.load(instr)
                    }

                    def sdkDir = properties.getProperty('sdk.dir')
                    adb = "$sdkDir/platform-tools/adb"
                }

                if (adb != null) {
                    try {
                        exec {
                            commandLine "$adb", "push", originFile, "/sdcard/mplugins/" + pluginName
                        }
                    } catch (Exception e) {
                        exec {
                            commandLine "$adb", "mkdir", "/sdcard/mplugins/"
                            commandLine "$adb", "push", originFile, "/sdcard/mplugins/" + pluginName
                        }
                    }
                }
            }
        }
    }
}
